/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controladores.AsignacionPermisoControlador;
import controladores.Controlador;
import controladores.EmpleadoControlador;
import controladores.PermisoControlador;
import controladores.TCAnalisisControlador;
import entidades.AsignacionHorario;
import entidades.AsignacionPermiso;
import entidades.Empleado;
import entidades.Permiso;
import entidades.TipoPermiso;
import vistas.dialogos.DlgEmpleado;
import vistas.dialogos.DlgTipoPermiso;
import vistas.modelos.MTAsignacionPermiso;
import vistas.modelos.MTEmpleado;
import com.personal.utiles.FechaUtil;
import com.personal.utiles.FormularioUtil;
import com.personal.utiles.ReporteUtil;
import controladores.AsignacionHorarioControlador;
import controladores.EmpleadoTControlador;
import controladores.GrupoHorarioControlador;
import controladores.HorarioControlador;
import entidades.EmpleadoT;
import entidades.GrupoHorario;
import entidades.Horario;
import java.awt.Component;
import java.io.File;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import utiles.UsuarioActivo;
import vistas.dialogos.DlgImportarDNI;
import vistas.dialogos.DlgVerIntegrantes;
import vistas.modelos.MTAsignacion;

/**
 *
 * @author fesquivelc
 */
public class AsignarHorario extends javax.swing.JInternalFrame {

    /**
     * Creates new form CRUDPeriodo
     */
    private List<AsignacionHorario> listado;
    private final ReporteUtil reporteador;
    private List<Horario> horarioList;
    private List<GrupoHorario> grupoList;
    private HorarioControlador hc;
    private AsignacionHorarioControlador controlador;
    private Empleado empleadoSeleccionado;
    private List<Empleado> empleadoList;
    private List<EmpleadoT> empleadoListT;
    private Horario horarioSeleccionado;
    private EmpleadoControlador ec;
    private EmpleadoTControlador etc;
    private GrupoHorarioControlador gc;
    private int accion;
    private GrupoHorario grupoSeleccionado;

    public AsignarHorario() {
        initComponents();
        inicializar();
        bindeoSalvaje();
        actualizarTabla();
        reporteador = new ReporteUtil();
//        this.radLote.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        grupoEGH = new javax.swing.ButtonGroup();
        pnlListado = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla = new org.jdesktop.swingx.JXTable();
        lblBusqueda = new org.jdesktop.swingx.JXBusyLabel();
        txtEmpleado = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        spFechaInicio1 = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        spFechaFin1 = new javax.swing.JSpinner();
        btnBuscar = new javax.swing.JButton();
        pnlNavegacion = new javax.swing.JPanel();
        btnPrimero = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        spPagina = new javax.swing.JSpinner();
        txtTotal = new javax.swing.JTextField();
        btnSiguiente = new javax.swing.JButton();
        btnUltimo = new javax.swing.JButton();
        cboTamanio = new javax.swing.JComboBox();
        pnlDatos = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboHorario = new javax.swing.JComboBox();
        btnVerHorario = new javax.swing.JButton();
        radEmpleado = new javax.swing.JRadioButton();
        radGrupoHorario = new javax.swing.JRadioButton();
        txtEmpleado1 = new javax.swing.JTextField();
        btnEmpleado = new javax.swing.JButton();
        cboGrupo = new javax.swing.JComboBox();
        btnVerGrupoHorario = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dcFechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        dcFechaFin = new com.toedter.calendar.JDateChooser();
        btnCargar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        grupoEGH.add(radEmpleado);
        grupoEGH.add(radGrupoHorario);

        setClosable(true);
        setMaximizable(true);
        setTitle("ASIGNAR HORARIOS");
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        pnlListado.setBorder(javax.swing.BorderFactory.createTitledBorder("Permisos"));
        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0};
        pnlListado.setLayout(jPanel1Layout);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel3.add(btnNuevo);

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel3.add(btnModificar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 15;
        pnlListado.add(jPanel3, gridBagConstraints);

        tblTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblTablaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblTabla);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        pnlListado.add(jScrollPane1, gridBagConstraints);

        lblBusqueda.setText("Empleado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(lblBusqueda, gridBagConstraints);

        txtEmpleado.setEditable(false);
        txtEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpleadoActionPerformed(evt);
            }
        });
        txtEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpleadoKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        pnlListado.add(txtEmpleado, gridBagConstraints);

        jButton4.setText("...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(jButton4, gridBagConstraints);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(btnLimpiar, gridBagConstraints);

        spFechaInicio1.setModel(new javax.swing.SpinnerDateModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(spFechaInicio1, gridBagConstraints);

        jLabel9.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(jLabel9, gridBagConstraints);

        spFechaFin1.setModel(new javax.swing.SpinnerDateModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(spFechaFin1, gridBagConstraints);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(btnBuscar, gridBagConstraints);

        pnlNavegacion.setLayout(new java.awt.GridLayout(1, 0, 2, 0));

        btnPrimero.setText("<<");
        btnPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeroActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnPrimero);

        btnAnterior.setText("<");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnAnterior);

        spPagina.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spPagina.setMinimumSize(new java.awt.Dimension(60, 20));
        spPagina.setPreferredSize(new java.awt.Dimension(60, 20));
        spPagina.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spPaginaStateChanged(evt);
            }
        });
        pnlNavegacion.add(spPagina);

        txtTotal.setEditable(false);
        txtTotal.setColumns(3);
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("1");
        pnlNavegacion.add(txtTotal);

        btnSiguiente.setText(">");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnSiguiente);

        btnUltimo.setText(">>");
        btnUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnUltimo);

        cboTamanio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25", "40", "50" }));
        cboTamanio.setMinimumSize(new java.awt.Dimension(53, 24));
        cboTamanio.setPreferredSize(new java.awt.Dimension(53, 24));
        cboTamanio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTamanioActionPerformed(evt);
            }
        });
        pnlNavegacion.add(cboTamanio);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 15;
        pnlListado.add(pnlNavegacion, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlListado, gridBagConstraints);

        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de asignación"));
        pnlDatos.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Horario:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel1, gridBagConstraints);

        cboHorario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        jPanel4.add(cboHorario, gridBagConstraints);

        btnVerHorario.setText("Ver");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel4.add(btnVerHorario, gridBagConstraints);

        radEmpleado.setText("Empleado:");
        radEmpleado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radEmpleadoStateChanged(evt);
            }
        });
        radEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radEmpleadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(radEmpleado, gridBagConstraints);

        radGrupoHorario.setSelected(true);
        radGrupoHorario.setText("Grupo horario:");
        radGrupoHorario.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radGrupoHorarioStateChanged(evt);
            }
        });
        radGrupoHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radGrupoHorarioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(radGrupoHorario, gridBagConstraints);

        txtEmpleado1.setEditable(false);
        txtEmpleado1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpleado1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel4.add(txtEmpleado1, gridBagConstraints);

        btnEmpleado.setText("...");
        btnEmpleado.setEnabled(false);
        btnEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpleadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(btnEmpleado, gridBagConstraints);

        cboGrupo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(cboGrupo, gridBagConstraints);

        btnVerGrupoHorario.setText("Ver");
        btnVerGrupoHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerGrupoHorarioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        jPanel4.add(btnVerGrupoHorario, gridBagConstraints);

        jLabel2.setText("Fecha de inicio:");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(dcFechaInicio, gridBagConstraints);

        jLabel3.setText("Fecha de fin:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(dcFechaFin, gridBagConstraints);

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        jPanel4.add(btnCargar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDatos.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel5.add(btnGuardar);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel5.add(btnCancelar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDatos.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlDatos, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        this.accion = Controlador.NUEVO;
        controlador.prepararCrear();
        this.controles(accion);
        this.checkboxes();
        //integrantes.clear();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            this.accion = Controlador.MODIFICAR;
            controlador.setSeleccionado(this.listado.get(fila));
            empleadoSeleccionado = ec.buscarPorDni(this.listado.get(fila).getEmpleado());
            this.controles(accion);
        }
        //==
        
    }//GEN-LAST:event_btnModificarActionPerformed

    private void tblTablaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTablaMouseReleased
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            AsignacionHorario asignacion = listado.get(fila);
            mostrar(asignacion);
            //FormularioUtil.activarComponente(this.btnImprimirTodo, true);
        }
    }//GEN-LAST:event_tblTablaMouseReleased

    private void txtEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpleadoKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            lblBusqueda.setBusy(true);
            buscar();
            lblBusqueda.setBusy(false);
        }
    }//GEN-LAST:event_txtEmpleadoKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DlgEmpleado dialogo = new DlgEmpleado(this);
        dialogo.setAgregar(false);
        this.empleadoSeleccionado = dialogo.getSeleccionado();
        if (this.empleadoSeleccionado != null) {
            this.txtEmpleado.setText(
                    empleadoSeleccionado.getNroDocumento()
                    + " " + empleadoSeleccionado.getApellidoPaterno()
                    + " " + empleadoSeleccionado.getApellidoMaterno()
                    + " " + empleadoSeleccionado.getNombre());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        FormularioUtil.limpiarComponente(this.txtEmpleado);
        this.empleadoSeleccionado = null;
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        System.out.println("BUSCAR");
        lblBusqueda.setBusy(true);
        paginaActual = 1;
        buscar();
        actualizarControlesNavegacion();
        lblBusqueda.setBusy(false);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeroActionPerformed
        // TODO add your handling code here:
        primero();
    }//GEN-LAST:event_btnPrimeroActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        anterior();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void spPaginaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spPaginaStateChanged
        // TODO add your handling code here:
        this.seleccionPagina();
    }//GEN-LAST:event_spPaginaStateChanged

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        siguiente();
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoActionPerformed
        // TODO add your handling code here:
        ultimo();
    }//GEN-LAST:event_btnUltimoActionPerformed

    private void cboTamanioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTamanioActionPerformed
        // TODO add your handling code here:
        this.paginaActual = 1;
        buscar();
        this.actualizarControlesNavegacion();
    }//GEN-LAST:event_cboTamanioActionPerformed

    private void txtEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpleadoActionPerformed

    private void radEmpleadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radEmpleadoStateChanged
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radEmpleadoStateChanged

    private void radEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radEmpleadoActionPerformed
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radEmpleadoActionPerformed

    private void radGrupoHorarioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radGrupoHorarioStateChanged
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radGrupoHorarioStateChanged

    private void radGrupoHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radGrupoHorarioActionPerformed
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radGrupoHorarioActionPerformed

    private void txtEmpleado1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpleado1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpleado1ActionPerformed

    private void btnEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpleadoActionPerformed
        // TODO add your handling code here:
        DlgEmpleado seleccion = new DlgEmpleado(this);
        empleadoSeleccionado = seleccion.getSeleccionado();
        if (empleadoSeleccionado != null) {
            txtEmpleado1.setText(empleadoSeleccionado.getApellidoPaterno() + " " + empleadoSeleccionado.getApellidoMaterno() + " " + empleadoSeleccionado.getNombre());
        }
    }//GEN-LAST:event_btnEmpleadoActionPerformed

    private void btnVerGrupoHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerGrupoHorarioActionPerformed
        // TODO add your handling code here:
        int grupo = this.cboGrupo.getSelectedIndex();
        if (grupo != -1) {
            grupoSeleccionado = grupoList.get(grupo);
            DlgVerIntegrantes integrantes = new DlgVerIntegrantes(this, grupoSeleccionado);
            integrantes.setVisible(true);
        }
    }//GEN-LAST:event_btnVerGrupoHorarioActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        DlgImportarDNI importar = new DlgImportarDNI(this);
        List<String> dnis = importar.obtenerDNI();
        empleadoListT = etc.buscarPorLista(dnis);

    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        if (erroresFormulario()) {
            return;
        }
        if (FormularioUtil.dialogoConfirmar(this, accion)) {
            AsignacionHorario seleccionada = this.controlador.getSeleccionado();

            FormularioUtil.convertirMayusculas(this.pnlDatos);

            seleccionada.setHorario(horarioList.get(cboHorario.getSelectedIndex()));
            boolean bandera = true;
            if (radGrupoHorario.isSelected()) {
                seleccionada.setGrupoHorario(grupoList.get(cboGrupo.getSelectedIndex()));
            } else if(radEmpleado.isSelected()){
                if(empleadoListT==null){
                    seleccionada.setEmpleado(empleadoSeleccionado.getNroDocumento());
                    //Agregado para manejar las fechas en empleados.
                    AsignacionHorario asigPrevia = this.controlador.buscarXEmpleadoXFechaFinNull2(empleadoSeleccionado.getNroDocumento(), dcFechaInicio.getDate());
                    if(asigPrevia!=null){
                        Calendar fechaAsig = Calendar.getInstance();
                        fechaAsig.setTime(dcFechaInicio.getDate());
                        fechaAsig.add(Calendar.DATE, -1);
                        asigPrevia.setFechaFin(fechaAsig.getTime());
                        this.controlador.setSeleccionado(asigPrevia);
                        this.controlador.accion(2);
                        this.controlador.setSeleccionado(seleccionada);
                    }
                    seleccionada.setFechaInicio(dcFechaInicio.getDate());
                    seleccionada.setFechaFin(dcFechaFin.getDate());
                }else{
                    for(EmpleadoT e : empleadoListT){
                        System.out.println("Dni ingresado: "+e.getNroDocumento()+" "+e.getNombre());
                        //                        seleccionada.setEmpleado(e.getNroDocumento());
                        //                        //Agregado para manejar las fechas en empleados.
                        AsignacionHorario asigPrevia;
                        if(this.controlador.buscarXEmpleadoXFechaFinNull2(e.getNroDocumento(), dcFechaInicio.getDate())!=null){
                            asigPrevia = this.controlador.buscarXEmpleadoXFechaFinNull2(e.getNroDocumento(), dcFechaInicio.getDate());
                        }else{
                            asigPrevia = null;
                        }
                        //
                        if(asigPrevia!=null){
                            Calendar fechaAsig = Calendar.getInstance();
                            fechaAsig.setTime(dcFechaInicio.getDate());
                            fechaAsig.add(Calendar.DATE, -1);
                            asigPrevia.setFechaFin(fechaAsig.getTime());
                            this.controlador.setSeleccionado(asigPrevia);
                            this.controlador.accion(2);
                            this.controlador.setSeleccionado(seleccionada);
                        }
                        //                        seleccionada.setFechaInicio(dcFechaInicio.getDate());
                        //                        seleccionada.setFechaFin(dcFechaFin.getDate());
                        //                        this.controlador.accion(1);
                        //===============================================================
                        AsignacionHorario newAsigh = new AsignacionHorario();
                        newAsigh.setEmpleado(e.getNroDocumento());
                        newAsigh.setFechaInicio(dcFechaInicio.getDate());
                        newAsigh.setFechaFin(dcFechaFin.getDate());
                        newAsigh.setGrupoHorario(null);
                        newAsigh.setHorario(horarioList.get(cboHorario.getSelectedIndex()));
                        newAsigh.setPorGrupo(false);
                        this.controlador.setSeleccionado(newAsigh);
                        if(controlador.accion(1)){
                            System.out.println("Guardado");
                        }else{
                            System.out.println("Falla al ingresar");
                        }
                    }
                    bandera = false;
                    this.limpiarListaEmpleado();
                }
            }

            seleccionada.setPorGrupo(radGrupoHorario.isSelected());
            if(bandera){
                if (controlador.accion(accion)) {
                    FormularioUtil.mensajeExito(this, accion);
                    this.accion = 0;
                    FormularioUtil.limpiarComponente(this.pnlDatos);
                    this.controles(accion);
                    this.actualizarTabla();
                    
                } else {
                    FormularioUtil.mensajeError(this, accion);
                }
            }else{
                System.out.println("Se ingreso personal por csv");
                this.accion = 0;
                FormularioUtil.limpiarComponente(this.pnlDatos);
                this.controles(accion);
                this.actualizarTabla();
            }

        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.accion = 0;
        this.controles(accion);
        FormularioUtil.limpiarComponente(this.pnlDatos);
    }//GEN-LAST:event_btnCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnEmpleado;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnPrimero;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton btnUltimo;
    private javax.swing.JButton btnVerGrupoHorario;
    private javax.swing.JButton btnVerHorario;
    private javax.swing.JComboBox cboGrupo;
    private javax.swing.JComboBox cboHorario;
    private javax.swing.JComboBox cboTamanio;
    private com.toedter.calendar.JDateChooser dcFechaFin;
    private com.toedter.calendar.JDateChooser dcFechaInicio;
    private javax.swing.ButtonGroup grupoEGH;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXBusyLabel lblBusqueda;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JPanel pnlListado;
    private javax.swing.JPanel pnlNavegacion;
    private javax.swing.JRadioButton radEmpleado;
    private javax.swing.JRadioButton radGrupoHorario;
    private javax.swing.JSpinner spFechaFin1;
    private javax.swing.JSpinner spFechaInicio1;
    private javax.swing.JSpinner spPagina;
    private org.jdesktop.swingx.JXTable tblTabla;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtEmpleado1;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void mostrar(AsignacionHorario asignacion) {
        cboHorario.setSelectedItem(asignacion.getHorario());
        boolean porGrupo = asignacion.isPorGrupo();

        radEmpleado.setSelected(!porGrupo);
        radGrupoHorario.setSelected(porGrupo);

        checkboxes();

        if (porGrupo) {
            cboGrupo.setSelectedItem(asignacion.getGrupoHorario());
        } else {
            Empleado e = ec.buscarPorId(asignacion.getEmpleado());
            txtEmpleado1.setText(e.getApellidoPaterno() + " " + e.getApellidoMaterno() + " " + e.getNombre());
            dcFechaInicio.setDate(asignacion.getFechaInicio());
            dcFechaFin.setDate(asignacion.getFechaFin());
        }
    }

    private void bindeoSalvaje() {
        BindingGroup bindeo = new BindingGroup();
        JComboBoxBinding bindHorario = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ, horarioList, cboHorario);
        JComboBoxBinding bindGrupo = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ, grupoList, cboGrupo);

        bindeo.addBinding(bindGrupo);
        bindeo.addBinding(bindHorario);

        bindeo.bind();

        DefaultListCellRenderer renderHorario = new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value instanceof Horario) {
                    value = ((Horario) value).getNombre();
                }

                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }

        };

        DefaultListCellRenderer renderGrupo = new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value instanceof GrupoHorario) {
                    value = ((GrupoHorario) value).getNombre();
                }

                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }

        };

        cboHorario.setRenderer(renderHorario);
        cboGrupo.setRenderer(renderGrupo);

        String[] columnas = {"Horario", "Jornada", "L", "M", "M", "J", "V", "S", "D", "Asignado a"};

        MTAsignacion mt = new MTAsignacion(listado, columnas);

        tblTabla.setModel(mt);
    }

    private void actualizarTabla() {
//        listado.clear();
//        empleadoSeleccionado = null;
//        FormularioUtil.limpiarComponente(txtEmpleado);
//        paginaActual = 1;
//        buscar();
//        actualizarControlesNavegacion();
//        tblTabla.packAll();
        //
        listado.clear();
        listado.addAll(controlador.buscarTodos());
        empleadoSeleccionado = null;
        tblTabla.packAll();
    }

//    private void mostrarIntegrantes(List<String> listadoDNI) {
//        integrantes.clear();
//        integrantes.addAll(ec.buscarPorLista(listadoDNI));
//        tblEmpleados.packAll();
//    }

    private void inicializar() {
        this.accion = 0;

        controlador = new AsignacionHorarioControlador();
        hc = new HorarioControlador();
        gc = new GrupoHorarioControlador();
        ec = new EmpleadoControlador();
        etc = new EmpleadoTControlador();
        listado = ObservableCollections.observableList(new ArrayList<AsignacionHorario>());
        horarioList = hc.buscarTodos();
        grupoList = gc.buscarTodos();

        this.controles(accion);
        //FormularioUtil.modeloSpinnerFechaHora(spHoraInicio, "HH:mm");
        //FormularioUtil.modeloSpinnerFechaHora(spHoraFin, "HH:mm");
        FormularioUtil.modeloSpinnerFechaHora(spFechaInicio1, "dd/MM/yyyy");
        FormularioUtil.modeloSpinnerFechaHora(spFechaFin1, "dd/MM/yyyy");
//        this.accion = 0;
//
//        controlador = new PermisoControlador();
//        ec = new EmpleadoControlador();
//        ac = new AsignacionPermisoControlador();
////        FormularioUtil.modeloSpinnerFechaHora(spFechaInicio, "dd/MM/yyyy");
////        FormularioUtil.modeloSpinnerFechaHora(spFechaFin, "dd/MM/yyyy");
//        FormularioUtil.modeloSpinnerFechaHora(spHoraInicio, "HH:mm");
//        FormularioUtil.modeloSpinnerFechaHora(spHoraFin, "HH:mm");
//        FormularioUtil.modeloSpinnerFechaHora(spFechaInicio1, "dd/MM/yyyy");
//        FormularioUtil.modeloSpinnerFechaHora(spFechaFin1, "dd/MM/yyyy");
//        this.controles(accion);
    }

    private void controles(int accion) {
        boolean bandera = accion == Controlador.NUEVO || accion == Controlador.MODIFICAR;

        FormularioUtil.activarComponente(this.pnlListado, !bandera);
        FormularioUtil.activarComponente(this.pnlDatos, bandera);
        //FormularioUtil.activarComponente(this.btnImprimirTodo, false);

        if (accion != Controlador.MODIFICAR) {
            FormularioUtil.limpiarComponente(this.pnlDatos);
        }

        //this.txtTipoPermiso.setEditable(false);
        //checkPorFecha(accion);
    }

    private List<String> obtenerListadoDNI(List<AsignacionPermiso> detalles) {
        List<String> listadoDNI = new ArrayList<>();
        for (AsignacionPermiso detalle : detalles) {
            listadoDNI.add(detalle.getEmpleado());
        }
        return listadoDNI;
    }

//    public void agregarEmpleado(Empleado empleado) {
//        integrantes.add(empleado);
//
//        AsignacionPermiso detalle = new AsignacionPermiso();
//        detalle.setEmpleado(empleado.getNroDocumento());
//        detalle.setPermiso(controlador.getSeleccionado());
//
//        controlador.getSeleccionado().getAsignacionPermisoList().add(detalle);
//    }
//
//    private void quitarEmpleado(int fila) {
//        //integrantes.remove(fila);
//        //controlador.getSeleccionado().getAsignacionPermisoList().remove(fila);
//        
//        String dni = integrantes.get(fila).getNroDocumento();
//        List<AsignacionPermiso> asignacionPermisos = controlador.getSeleccionado().getAsignacionPermisoList();
//        for(AsignacionPermiso asignacionPermiso : asignacionPermisos){
//            if(asignacionPermiso.getEmpleado().equals(dni)){
//               controlador.getSeleccionado().getAsignacionPermisoList().remove(asignacionPermiso);
//               break;
//            }
//        }
//        integrantes.remove(fila);
//    }

    private int paginaActual = 1;
    private int totalPaginas = 0;
    private int tamanioPagina = 0;

    private void buscar() {
        String busqueda = txtEmpleado.getText();
        tamanioPagina = Integer.parseInt(cboTamanio.getSelectedItem().toString());

        Date fechaInicio = (Date) spFechaInicio1.getValue();
        Date fechaFin = (Date) spFechaFin1.getValue();
        listado.clear();
        List<AsignacionHorario> lista = this.listar(empleadoSeleccionado, fechaInicio, fechaFin, paginaActual, tamanioPagina);
        System.out.println("LISTA: " + lista.size());
        listado.addAll(lista);

        tblTabla.packAll();
    }

    private List<AsignacionHorario> listar(Empleado empleado, Date fechaInicio, Date fechaFin, int pagina, int tamanio) {
        int total;

        if (empleado == null) {
            total = controlador.contarXFecha(fechaInicio, fechaFin);
        } else {
            total = controlador.contarXEmpleadoXFecha(empleado.getNroDocumento(), fechaInicio, fechaFin);
        }

        if (total % tamanio == 0) {
            totalPaginas = total / tamanio;
        } else {
            totalPaginas = (total / tamanio) + 1;
        }

        if (totalPaginas == 0) {
            totalPaginas = 1;
        }

        if (empleado == null) {
            return controlador.buscarXFecha(fechaInicio, fechaFin, (pagina - 1) * tamanio, tamanio);
        } else {
            return controlador.buscarXEmpleadoXFecha(empleado.getNroDocumento(), fechaInicio, fechaFin, (pagina - 1) * tamanio, tamanio);
        }

    }

    private void siguiente() {
        paginaActual++;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void ultimo() {
        paginaActual = totalPaginas;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void primero() {
        paginaActual = 1;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void anterior() {
        paginaActual--;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void seleccionPagina() {
        paginaActual = (int) spPagina.getValue();
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void actualizarControlesNavegacion() {
        spPagina.setValue(paginaActual);
        txtTotal.setText(totalPaginas + "");

        SpinnerNumberModel modeloSP = (SpinnerNumberModel) spPagina.getModel();
        Comparable<Integer> maximo = totalPaginas;
        modeloSP.setMaximum(maximo);

        this.btnSiguiente.setEnabled(paginaActual != totalPaginas);
        this.btnUltimo.setEnabled(paginaActual != totalPaginas);

        this.btnAnterior.setEnabled(paginaActual != 1);
        this.btnPrimero.setEnabled(paginaActual != 1);
    }
    private final DateFormat dfFecha = new SimpleDateFormat("dd/MM/yyyy");
    private final DateFormat dfHora = new SimpleDateFormat("HH:mm");

    private void imprimirBoleta(Permiso seleccionada) {

        File reporte = new File("reportes/r_papeleta_permiso_lote.jasper");
//        List<Long> lista = new ArrayList<>();
        String tipoPermiso = "";
        String conGoce = "";
        String fechas = "";
        switch (seleccionada.getTipoPermiso().getTipoDescuento()) {
            case 'C':
                conGoce += "SI";
                break;
            case 'S':
                conGoce += "NO";
                break;
        }

        switch (seleccionada.getTipoPermiso().getClase()) {
            case 'L':
                tipoPermiso = "LICENCIA - " + seleccionada.getTipoPermiso().getNombre();
                break;
            case 'P':
                tipoPermiso = "PERMISO - " + seleccionada.getTipoPermiso().getNombre();
                break;
            case 'C':
                tipoPermiso = "COMISIÓN DE SERVICIOS";
                break;
        }

        if (seleccionada.isPorFecha()) {
            fechas = dfFecha.format(seleccionada.getFechaInicio()) + " - " + dfFecha.format(seleccionada.getFechaFin());
        } else {
            fechas = dfFecha.format(seleccionada.getFechaInicio()) + " " + dfHora.format(seleccionada.getHoraInicio()) + " - " + dfFecha.format(seleccionada.getFechaFin()) + " " + dfHora.format(seleccionada.getHoraFin());
        }

//        for (AsignacionPermiso asignacion : seleccionada.getAsignacionPermisoList()) {
//            lista.add(asignacion.getId());
//        }
        Map<String, Object> parametros = new HashMap<>();
        parametros.put("permiso_id", seleccionada.getId());
        parametros.put("tipoPermiso", tipoPermiso);
        parametros.put("conGoce", conGoce);
        System.out.println("NULL 1 ");
        parametros.put("usuario", UsuarioActivo.getUsuario().getLogin());
        System.out.println("NULL 2 ");
        parametros.put("CONEXION_EMPLEADOS", ec.getDao().getConexion());
        parametros.put("fechas", fechas);
        System.out.println("NULL 3 ");

        reporteador.setConn(controlador.getDao().getConexion());
        reporteador.generarReporte(reporte, parametros, JOptionPane.getFrameForComponent(this));

    }

//    private void imprimirBoleta(AsignacionPermiso seleccionada) {
//
//        File reporte = new File("reportes/r_papeleta_permiso2.jasper");
////        List<Long> lista = new ArrayList<>();
//        String tipoPermiso = "";
//        String conGoce = "";
//        String fechas = "";
//        switch (seleccionada.getPermiso().getTipoPermiso().getTipoDescuento()) {
//            case 'C':
//                conGoce += "SI";
//                break;
//            case 'S':
//                conGoce += "NO";
//                break;
//        }
//
//        switch (seleccionada.getPermiso().getTipoPermiso().getClase()) {
//            case 'L':
//                tipoPermiso = "LICENCIA - " + seleccionada.getPermiso().getTipoPermiso().getNombre();
//                break;
//            case 'P':
//                tipoPermiso = "PERMISO - " + seleccionada.getPermiso().getTipoPermiso().getNombre();
//                break;
//            case 'C':
//                tipoPermiso = "COMISIÓN DE SERVICIOS";
//                break;
//        }
//
//        if (seleccionada.getPermiso().isPorFecha()) {
//            fechas = dfFecha.format(seleccionada.getPermiso().getFechaInicio()) + " - " + dfFecha.format(seleccionada.getPermiso().getFechaFin());
//        } else {
//            fechas = dfFecha.format(seleccionada.getPermiso().getFechaInicio()) + " " + dfHora.format(seleccionada.getPermiso().getHoraInicio()) + " - " + dfFecha.format(seleccionada.getPermiso().getFechaFin()) + " " + dfHora.format(seleccionada.getPermiso().getHoraFin());
//        }
//
////        for(AsignacionPermiso asignacion : seleccionada.getAsignacionPermisoList()){
////        lista.add(seleccionada.getId());
////        }
//        Map<String, Object> parametros = new HashMap<>();
//        parametros.put("permiso_id", seleccionada.getPermiso().getId());
//        parametros.put("empleado_nro_documento", seleccionada.getEmpleado());
//        parametros.put("tipoPermiso", tipoPermiso);
//        parametros.put("conGoce", conGoce);
//        System.out.println("NULL 1 ");
//        parametros.put("usuario", UsuarioActivo.getUsuario().getLogin());
//        System.out.println("NULL 2 ");
//        parametros.put("CONEXION_EMPLEADOS", ec.getDao().getConexion());
//        System.out.println("NULL 3 ");
//        parametros.put("fechas", fechas);
//
//        reporteador.setConn(controlador.getDao().getConexion());
//        reporteador.generarReporte(reporte, parametros, JOptionPane.getFrameForComponent(this));
//
//    }

    //private final TCAnalisisControlador tcac = new TCAnalisisControlador();

//    private void retrocederTiempo(List<String> dnis, Date fechaInicio) {
//        tcac.retrocederTiempo(dnis, fechaInicio);
//    }

//    private void checkPorFecha(int accion) {
//        if (accion != 0) {
//            FormularioUtil.activarComponente(dcFechaInicio, true);
//            FormularioUtil.activarComponente(dcFechaFin, radFecha.isSelected());
//
//            spHoraInicio.setEnabled(!radFecha.isSelected());
//            spHoraFin.setEnabled(!radFecha.isSelected());
//        }
//    }

    private boolean erroresFormulario() {
        int errores = 0;
        Date fechaInicio = dcFechaInicio.getDate();

        String mensaje = "";
        if (radEmpleado.isSelected()) {
            if(dcFechaFin.getDate()!=null){
                Date fechaFin = dcFechaFin.getDate();
                if (fechaInicio.compareTo(fechaFin) > 0) {
                    errores++;
                    mensaje = ">La fecha de inicio debe ser menor que la fecha de fin\n";
                }
            }
            
            //Traemos los dnis de los empleados
            if(accion==1){
                //AsignacionHorario paraComprobar = this.controlador.getSeleccionado();
                //System.out.println("Empleado escogido: "+empleadoSeleccionado.getNroDocumento() + " "+empleadoSeleccionado.getNombre());
                //System.out.println("Fecha de inicio de horario: "+paraComprobar.getFechaInicio().toString());
                //List<AsignacionPermiso> lista = ac.buscarXFechaDni(asignacion.getEmpleado(), fechaInicio);
                if(empleadoListT==null){
                    //Caso 1: La asignacion se ingresa reemplazando a una asignacion con una fecha fin nula.
                    AsignacionHorario lista1 = controlador.buscarXEmpleadoXFechaFinNull(empleadoSeleccionado.getNroDocumento(), dcFechaInicio.getDate());
                    //Caso 2: Buscar si la asignacion esta entre alguna fecha inicio o fin
                    List<AsignacionHorario> lista2 = controlador.buscarXEmpleadosXFecha(empleadoSeleccionado.getNroDocumento(), dcFechaInicio.getDate());
                    System.out.println("Fecha y hora: "+fechaInicio.toString());
                    if(lista1==null){

                    }else{
                       errores++;
                       mensaje = "El empleado "+empleadoSeleccionado.getNroDocumento()+" tiene conflicto con un horario añadido anteriormente \n Ingrese otro rango de fechas \n";
                    }
                    if(lista2.isEmpty()){

                    }else{
                       errores++;
                       mensaje = "El empleado "+empleadoSeleccionado.getNroDocumento()+" tiene conflicto con un horario añadido anteriormente \n Ingrese otro rango de fechas \n";
                    }
                }else{
                    for (EmpleadoT ep : empleadoListT) {
                        //Caso 1: La asignacion se ingresa reemplazando a una asignacion con una fecha fin nula.
                        AsignacionHorario lista1 = controlador.buscarXEmpleadoXFechaFinNull(ep.getNroDocumento(), dcFechaInicio.getDate());
                        //Caso 2: Buscar si la asignacion esta entre alguna fecha inicio o fin
                        List<AsignacionHorario> lista2 = controlador.buscarXEmpleadosXFecha(ep.getNroDocumento(), dcFechaInicio.getDate());
                        System.out.println("Fecha y hora: "+fechaInicio.toString());
                        if(lista1==null){

                        }else{
                           errores++;
                           mensaje = "El empleado "+ep.getNroDocumento()+" tiene conflicto con un horario añadido anteriormente \n Ingrese otro rango de fechas \n";
                        }
                        if(lista2.isEmpty()){

                        }else{
                           errores++;
                           mensaje = "El empleado "+ep.getNroDocumento()+" tiene conflicto con un horario añadido anteriormente \n Ingrese otro rango de fechas \n";
                        }
                    }
                }
                
                
            }
            //Traemos los permisos por dni
        }
        if (errores > 0) {
            JOptionPane.showMessageDialog(this, "Se ha(n) encontrado el(los) siguiente(s) error(es):\n" + mensaje, "Mensaje del sistema", JOptionPane.ERROR_MESSAGE);
        }
        return errores != 0;
    }

    private void mostrarRecord(Empleado empleado) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(empleado.getFechaInicioContrato());

        Date fInicio = dcFechaInicio.getDate();

    }

//    private void opciones() {
//        FormularioUtil.activarComponente(dcFechaInicio, radFecha.isSelected() || radLote.isSelected());
//        FormularioUtil.activarComponente(dcFechaFin, radFecha.isSelected() || radLote.isSelected());
//        spHoraInicio.setEnabled(radHora.isSelected() || radLote.isSelected());
//        spHoraFin.setEnabled(radHora.isSelected() || radLote.isSelected());
//
//    }
    
    private void checkboxes() {
        if (accion != 0) {
            boolean porGrupo = radGrupoHorario.isSelected();

            FormularioUtil.activarComponente(btnEmpleado, !porGrupo);
            FormularioUtil.activarComponente(cboGrupo, porGrupo);
            FormularioUtil.activarComponente(txtEmpleado, false);
            FormularioUtil.activarComponente(dcFechaInicio, radEmpleado.isSelected());
            FormularioUtil.activarComponente(btnCargar, radEmpleado.isSelected());
            FormularioUtil.activarComponente(dcFechaFin,radEmpleado.isSelected());
        }

    }
    
    private void limpiarListaEmpleado(){
        empleadoListT.clear();;
    }
}
