/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import com.personal.utiles.FechaUtil;
import controladores.Controlador;
import controladores.EmpleadoControlador;
import controladores.GrupoHorarioControlador;
import entidades.AsignacionHorario;
import entidades.DetalleGrupoHorario;
import entidades.Empleado;
import entidades.GrupoHorario;
import vistas.dialogos.DlgEmpleado;
import vistas.modelos.MTEmpleado;
import vistas.modelos.MTGrupoHorario;
import com.personal.utiles.FormularioUtil;
import controladores.AsignacionHorarioControlador;
import controladores.AsignacionPermisoControlador;
import controladores.DetalleGrupoControlador;
import controladores.MarcacionControlador;
import controladores.PermisoControlador;
import controladores.TCAnalisisControlador;
import controladores.TipoPermisoControlador;
import entidades.AsignacionPermiso;
import entidades.Horario;
import entidades.Permiso;
import entidades.Vacacion;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.observablecollections.ObservableCollections;
import vistas.dialogos.DlgImportarCSV;
import vistas.dialogos.DlgImportarDNI;

/**
 *
 * @author fesquivelc
 */
public class ImportarPermisos extends javax.swing.JInternalFrame {

    /**
     * Creates new form CRUDPeriodo
     */
    private List<GrupoHorario> listado;
    private List<Empleado> integrantes;
    private GrupoHorarioControlador controlador;
    private GrupoHorarioControlador tcontrolador;
    //para controlar la papeleta
    private DetalleGrupoControlador dgc;
    private AsignacionHorarioControlador ashc;
    //
    private MarcacionControlador mc;
    private EmpleadoControlador ec;
    private DetalleGrupoControlador dgh;
    private TipoPermisoControlador tpc;
    private PermisoControlador pc;
    private AsignacionPermisoControlador asc;
    private List<Permiso> listaGuardar = new ArrayList<>();
    private int accion;

    public ImportarPermisos() {
        initComponents();
        inicializar();
        bindeoSalvaje();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlDatos = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblIntegrantes = new org.jdesktop.swingx.JXTable();
        jPanel5 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("INGRESO DE PERMISOS");
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder("Permisos"));
        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {0};
        jPanel2Layout.rowHeights = new int[] {0, 5, 0};
        pnlDatos.setLayout(jPanel2Layout);

        java.awt.GridBagLayout jPanel4Layout = new java.awt.GridBagLayout();
        jPanel4Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        jPanel4Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel4.setLayout(jPanel4Layout);

        jLabel2.setText("Registros:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel4.add(jLabel2, gridBagConstraints);

        jScrollPane3.setViewportView(tblIntegrantes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel4.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDatos.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel5.add(btnGuardar);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel5.add(btnCancelar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDatos.add(jPanel5, gridBagConstraints);

        btnNuevo.setText("Importar Permisos");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        pnlDatos.add(btnNuevo, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlDatos, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.accion = 0;
        this.controles(accion);
        FormularioUtil.limpiarComponente(this.pnlDatos);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        DlgImportarCSV importar = new DlgImportarCSV(this);
        List<String []> info = importar.obtenerDNI();
        
        int numero = 1;
        int contadorV = 0;
        Calendar date = Calendar.getInstance();
        List<Permiso> listaPermiso = new ArrayList<>();
        for(String[] a : info){
            try {
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                SimpleDateFormat formatterHora = new SimpleDateFormat("HH:mm");
                List<String> listaString = new ArrayList<>();
                for(String item: a){
                    listaString.add(item);
                }
                /**
                 * Definimos atributos de permiso
                 */
                //Para la asignacion de permiso
                String dni = listaString.get(0);
                
                //Atributos propios de permiso
                Date fechaInicio = formatter.parse(listaString.get(1));
                Date fechaFin = formatter.parse(listaString.get(2));
//                //Traemos al empleado para validar su jornada
                Empleado empleadoPermiso = ec.buscarPorDni(dni);
                //System.out.println("Empleado: "+empleadoPermiso.getNroDocumento());
//                List<DetalleGrupoHorario> dg = dgc.buscarXEmpleado(empleadoPermiso);
//                DetalleGrupoHorario dhEscogido = dg.get(0);
//                System.out.println("Detalle grupo: "+dhEscogido.getGrupoHorario().getNombre());
//                GrupoHorario gHorario = dhEscogido.getGrupoHorario();
//                List<AsignacionHorario> listHorario = ashc.buscarXGrupo(gHorario);
//                Date horaSalida = null;
//                //Ver que hora de salida usar de acuerdo al horario actual que maneja
//                if(ashc.buscarXEmpleadosXAll(dni, fechaInicio) != null){
//                    List<AsignacionHorario> listaHorario = ashc.buscarXEmpleadosXAll(dni, fechaInicio);
//                    if(!listaHorario.isEmpty()){
//                       AsignacionHorario asEmpleado = listaHorario.get(0);
//                       horaSalida = asEmpleado.getHorario().getJornada().getTurnoHS();
//                    }
//                    
//                }else{
//                    horaSalida = listHorario.get(0).getHorario().getJornada().getTurnoHS();
//                    System.out.println("Hora de Salida: "+horaSalida.toString());
//                }
                //
                //System.out.println("Hora de Salida: "+horaSalida.toString());
                Date horaJornadaHS = obtenerHorarios(empleadoPermiso, fechaInicio).get(0).getJornada().getTurnoHS();
                
                System.out.println("Hora a tomar en cuenta: "+horaJornadaHS.toString());
                
                char opcion;
                boolean porFecha;
                Date horaInicio = null;
                Date horaFin = null;
                Long diferencia;
                if(!listaString.get(3).isEmpty()){
                    opcion = 'H';
                    porFecha = false;
                    horaInicio = formatterHora.parse(listaString.get(3));
                    if(!listaString.get(4).isEmpty()){
                        horaFin = formatterHora.parse(listaString.get(4));
                    }else{
                        horaFin = horaJornadaHS;
                        //horaFin = formatterHora.parse("18:00:00");
                    }
                    diferencia = fechaFin.getTime() - fechaInicio.getTime();
                }else{
                    porFecha = true;
                    opcion = 'F';                   
                    diferencia = fechaFin.getTime() - fechaInicio.getTime();
                }
                BigDecimal diferenciaMin = new BigDecimal(diferencia / (60 * 1000 * 60));
                String documento = listaString.get(5);
                String tipoPermiso = listaString.get(6);
                String motivo = listaString.get(7);
                boolean cubreEntrada = false;
                boolean cubreSalida = false;
                
                //Creacion de permiso
                Permiso permisoIngresado = new Permiso();
                permisoIngresado.setCubreEntrada(cubreEntrada);
                permisoIngresado.setCubreSalida(cubreSalida);
                permisoIngresado.setFechaInicio(fechaInicio);
                permisoIngresado.setFechaFin(fechaFin);
                permisoIngresado.setPorFecha(porFecha);
                permisoIngresado.setHoraInicio(horaInicio);
                permisoIngresado.setHoraFin(horaFin);
                permisoIngresado.setDocumento(documento);
                permisoIngresado.setOpcion(opcion);
                permisoIngresado.setMotivo(motivo);
                permisoIngresado.setTipoPermiso(tpc.buscarPorId(tipoPermiso));
                permisoIngresado.setDiferencia(diferenciaMin);
                //Asignacion de permiso
                AsignacionPermiso asignacion = new AsignacionPermiso();
                asignacion.setEmpleado(dni);
                asignacion.setPermiso(permisoIngresado);
                List<AsignacionPermiso> listaAsignacion = new ArrayList<>();
                permisoIngresado.setAsignacionPermisoList(listaAsignacion);
                permisoIngresado.getAsignacionPermisoList().add(asignacion);
                        
                listaPermiso.add(permisoIngresado);
            } catch (ParseException ex) {
                Logger.getLogger(ImportarPermisos.class.getName()).log(Level.SEVERE, null, ex);
            }
            contadorV+=1;
        }
        System.out.println("Permisos de permisos cargados: "+listaPermiso.size());
        //Validacion de permisos
        for(Permiso permiso : listaPermiso){
            Date fechaInicio = permiso.getFechaInicio();
            Date horaInicio = permiso.getHoraInicio();
            if(permiso.getOpcion()=='F'){
                for(AsignacionPermiso asignacion:permiso.getAsignacionPermisoList()){
                System.out.println(asignacion.getEmpleado());
                    List<AsignacionPermiso> lista = asc.buscarXFechaDni(asignacion.getEmpleado(), fechaInicio);
                    System.out.println("Fecha y hora: "+fechaInicio.toString());
                    if(lista.isEmpty()){
                        listaGuardar.add(permiso);
                    }else{
                        System.out.println("No se ingreso la siguiente asignacion para: "+permiso.getAsignacionPermisoList().get(0)+" Tipo de permiso: "+permiso.getOpcion());
                       break;
                    }
                }
            }else if(permiso.getOpcion()=='H'){
                for(AsignacionPermiso asignacion : permiso.getAsignacionPermisoList()){
                    List<AsignacionPermiso> lista = asc.buscarXHora(asignacion.getEmpleado(), horaInicio, fechaInicio);
                    if(lista.isEmpty()){
                        listaGuardar.add(permiso);
                    }else{
                        System.out.println("No se ingreso la siguiente asignacion para: "+permiso.getAsignacionPermisoList().get(0)+" Tipo de permiso: "+permiso.getOpcion());
                        break;
                    }
                }
            }       
        }
        System.out.println("Cantidad de permisos a ingresar: "+listaGuardar.size());
        System.out.println("Lista permisos a ingresar:");
        for(Permiso p : listaGuardar){
           if(p.getHoraInicio()!=null){
                System.out.println("Permiso a guardar: "+p.getDocumento()+" Fecha Inicio: "+p.getFechaInicio().toString()+" Fecha Fin: "+p.getFechaFin().toString()+" Fecha Hora: "+p.getHoraFin().toString());
           }else{
               System.out.println("Permiso a guardar: "+p.getDocumento()+" Fecha Inicio: "+p.getFechaInicio().toString()+" Fecha Fin: "+p.getFechaFin().toString());
           }
           
       }
    }//GEN-LAST:event_btnNuevoActionPerformed

    public List<Horario> obtenerHorarios(Empleado empleado,Date fecha) {
        //PRIMERO OBTENEMOS LOS GRUPOS HORARIOS ASIGNADOS

        List<DetalleGrupoHorario> detalles = dgc.buscarXEmpleado(empleado);
        List<GrupoHorario> grupos = new ArrayList<>();
        List<AsignacionHorario> horarioEspecial = ashc.buscarXEmpleadosXAll(empleado.getNroDocumento(), fecha);
        List<Horario> horarios = new ArrayList<>();
        List<AsignacionHorario> asignaciones = new ArrayList<>();

        for (DetalleGrupoHorario detalle : detalles) {
            grupos.add(detalle.getGrupoHorario());
        }

        if (!grupos.isEmpty()) {
            asignaciones.addAll(ashc.buscarXGrupos(grupos));
        }
        
        if(!horarioEspecial.isEmpty()){
            asignaciones.addAll(ashc.buscarXEmpleadosXAll(empleado.getNroDocumento(),fecha));
        }
        

        if (!asignaciones.isEmpty()) {
            for (AsignacionHorario asignacion : asignaciones) {
                horarios.add(asignacion.getHorario());
            }
        }

        return horarios;
    }
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
       for(Permiso p : listaGuardar){
           System.out.println("Permiso a guardar: "+p.getDocumento()+" Fecha Inicio: "+p.getFechaInicio().toString()+" Fecha Fin: "+p.getFechaFin().toString());
       }
       
       for(Permiso p :listaGuardar){
            pc.setSeleccionado(p);
            List<String> dnis = new ArrayList<>();
            for (AsignacionPermiso asignacion : p.getAsignacionPermisoList()) {
                dnis.add(asignacion.getEmpleado());
            }
            retrocederTiempo(dnis, p.getFechaInicio());
            if(pc.accion(1)){
                System.out.println("Guardado");
            }else{
                System.out.println("Falla al ingresar");
            }
       }
    }//GEN-LAST:event_btnGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlDatos;
    private org.jdesktop.swingx.JXTable tblIntegrantes;
    // End of variables declaration//GEN-END:variables

    private void mostrar(GrupoHorario grupo) {
//        txtCodigo.setText(grupo.getCodigo());
  //      txtNombre.setText(grupo.getNombre());

        List<String> listaDNI = obtenerListadoDNI(grupo.getDetalleGrupoHorarioList());
        if (!listaDNI.isEmpty()) {
            mostrarIntegrantes(listaDNI);
        }

    }

    private void bindeoSalvaje() {
        listado = new ArrayList<>();
        listado = ObservableCollections.observableList(listado);

        integrantes = ObservableCollections.observableList(new ArrayList<Empleado>());

        String[] columnas = {"Código", "Nombre"};
        String[] columnasIntegrantes = {"Nro Documento", "Empleado"};

        MTGrupoHorario mt = new MTGrupoHorario(listado, columnas);
        MTEmpleado mtIntegrantes = new MTEmpleado(integrantes, columnasIntegrantes);
//        tblTabla.setModel(mt);
        tblIntegrantes.setModel(mtIntegrantes);

        actualizarTabla();
    }

    private void actualizarTabla() {
        listado.clear();
        listado.addAll(controlador.buscarTodos());
     //   tblTabla.packAll();
    }

    private void mostrarIntegrantes(List<String> listadoDNI) {
        integrantes.clear();
        integrantes.addAll(ec.buscarPorLista(listadoDNI));
        tblIntegrantes.packAll();
    }

    private void inicializar() {
        this.accion = 1;
        mc = new MarcacionControlador();
        controlador = new GrupoHorarioControlador();
        ec = new EmpleadoControlador();
        tpc = new TipoPermisoControlador();
        pc = new PermisoControlador();
        asc = new AsignacionPermisoControlador();
        ashc = new AsignacionHorarioControlador();
        dgc = new DetalleGrupoControlador();
        this.controles(accion);
    }

    private void controles(int accion) {
        boolean bandera = accion == Controlador.NUEVO || accion == Controlador.MODIFICAR;

//        FormularioUtil.activarComponente(this.pnlListado, !bandera);
        FormularioUtil.activarComponente(this.pnlDatos, bandera);

        if (accion != Controlador.MODIFICAR) {
            FormularioUtil.limpiarComponente(this.pnlDatos);

        }
    }

    private List<String> obtenerListadoDNI(List<DetalleGrupoHorario> detalles) {
        List<String> listadoDNI = new ArrayList<>();
        for (DetalleGrupoHorario detalle : detalles) {
            listadoDNI.add(detalle.getEmpleado());
        }
        return listadoDNI;
    }

    public void agregarEmpleado(Empleado empleado) {
        if (!integrantes.contains(empleado)) {
            integrantes.add(empleado);
//            //ec.eliminarAsignacionGrupo(empleado.getNroDocumento());
//            List<DetalleGrupoHorario> listaDetalles;
//            if(!dgh.buscarXEmpleado(empleado).isEmpty()){
//                listaDetalles = dgh.buscarXEmpleado(empleado);
//                if(!listaDetalles.isEmpty()){
//                    for (DetalleGrupoHorario listaDetalle : listaDetalles) {
//                        GrupoHorario grupoHorarioAntiguo = listaDetalle.getGrupoHorario();
//                        tcontrolador.setSeleccionado(grupoHorarioAntiguo);
//                        tcontrolador.getSeleccionado().getDetalleGrupoHorarioList().remove(0);
//                    }
//                }
//            }
            
            
            DetalleGrupoHorario detalle = new DetalleGrupoHorario();
            detalle.setEmpleado(empleado.getNroDocumento());
            detalle.setGrupoHorario(controlador.getSeleccionado());
            
            controlador.getSeleccionado().getDetalleGrupoHorarioList().add(detalle);
        }

    }

    private void quitarEmpleado(int fila) {
        integrantes.remove(fila);
        controlador.getSeleccionado().getDetalleGrupoHorarioList().remove(fila);
    }
    
    private final TCAnalisisControlador tcac = new TCAnalisisControlador();

    private void retrocederTiempo(List<String> dnis, Date fechaInicio) {
        tcac.retrocederTiempo(dnis, fechaInicio);
    }
}
